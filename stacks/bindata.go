// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x6f\x6f\x22\xb7\x13\x7e\x9f\x4f\x61\xed\xef\xa4\xfc\xee\x94\x65\xc9\xf5\xd2\x9e\x56\xe2\x05\x22\x9c\x2e\x52\x2e\xd0\xc0\xa9\xea\x2b\x64\xec\x01\xac\x78\xed\x95\x3d\x4b\x8e\xfe\xf9\xee\x95\xbd\x5e\xd6\x1b\xe0\x88\x5a\x55\x7d\x05\xeb\xe7\x99\xb1\xc7\x33\xf3\x78\x98\x56\x2b\xb1\xb6\xf9\x05\x21\x05\xd8\x8d\xfb\x25\x84\x69\x85\xa0\x30\x27\x7f\xa4\xfe\x9b\x10\x2e\x2c\x5d\x4a\x98\x6a\x29\xd8\x6e\xb4\x01\xf6\x64\x73\x82\xa6\x82\x80\x0b\xb5\x36\x60\xed\x48\x2b\x34\x5a\x4a\x30\x5f\x34\x87\x9c\x24\x93\x4f\x9f\x92\x40\xa1\x15\x6e\x6a\xfb\x9c\x3c\x4c\x1e\xc6\x61\xd9\x70\xfb\x08\x2b\x03\x76\x73\x0b\x92\xee\x72\x72\xdd\xb7\x01\xd2\x15\x2e\x75\xa5\xf8\xdc\xd0\xd5\x4a\xb0\x60\x1c\x40\x42\x0a\xbf\xc5\xf0\xfe\x7e\xf2\xcb\x62\xf8\xf0\x6b\x73\x52\x58\xd1\x4a\xe2\xc8\xc7\xd5\x92\xb9\xb0\x4c\x6f\xc1\xec\x4e\x6d\xe6\xa3\x56\xc0\x70\x2e\x0a\xd0\x15\xe6\xe4\x87\x2e\xb6\x12\xeb\x29\xc5\x4d\x4e\x92\x0c\x90\x65\xc2\xa2\xd0\x59\x69\xf4\xb7\x5d\xb2\xa7\x2d\x85\xa2\x66\xd7\xd0\x2a\x6b\x32\xa9\x19\x95\xd9\x52\xa8\x0c\xd4\x56\x47\x54\x0b\x66\x2b\x18\x8c\x64\x65\x11\x4c\x4e\xbc\xbf\xd4\xfb\x6b\x0f\x6d\xa8\x50\xb7\x95\xa1\x28\xb4\xca\xc9\x87\x9b\xf6\x40\x25\x35\xa0\x70\xb6\xa9\x90\xeb\xe7\x88\x73\x5d\x44\xa7\x16\x0a\xc1\x30\x28\x1d\x54\x27\xe4\x71\x7c\x7b\xf7\x38\x1e\xcd\x5b\x3f\x6e\xc3\x21\x2f\x84\x9a\x6a\x83\x39\xb9\xbe\xe9\xf7\xfb\x71\xd8\x2e\x9f\x53\x49\x15\x0c\x8f\xe7\x2f\xba\xda\x21\xe7\xae\x08\xf6\xb1\x08\xa9\xb1\xf7\xe6\xf7\x87\xe1\x97\xf1\x6c\x3a\x1c\x8d\xff\xcc\x9d\xf7\x9f\x2e\x2e\x42\xec\xbe\xea\x22\x6e\x9d\x2d\x49\x97\x20\x6d\x93\x39\x0f\xe7\xc4\xe3\x7e\x69\x2d\xf5\x92\xca\x45\x09\xa6\x10\xd6\x0a\xad\x02\x35\x25\x97\xef\x42\x9a\x7a\xde\xa8\x27\x74\xf6\xee\xb2\xc5\x14\xe0\xb3\x36\x4f\x42\x9d\xc0\x5d\x7d\x82\x42\xc1\xfc\x4d\x9e\xe0\x94\x02\xbe\x21\x28\xbf\x6f\xef\xe9\xa3\x75\x04\x56\x59\xd4\x85\x01\xab\x2b\xc3\x80\xc3\x4a\x28\xe1\x5c\xd8\xc8\xb0\xb5\xca\x70\x23\x0c\x2f\xa9\xc1\x5d\x63\xf2\x7a\x62\xaf\x85\x8f\xdb\x84\x3e\x3c\xe5\x72\x0f\x67\x16\x29\x56\x7b\x96\x59\x52\x16\x45\x1c\x56\x99\x01\x8a\x70\xb5\x06\xbc\x92\xc2\xe2\xd5\x33\x45\xb6\xb9\xaa\x4a\x4e\x11\xc2\x55\x17\xb4\xb4\x81\x0d\x8a\x97\x5a\x28\x6c\xbe\x4b\xcd\x9b\xbf\x4d\xbe\xc3\xa7\xa2\x05\xd8\x92\x46\x0b\x9a\x43\xcb\x65\x06\x82\x13\x2b\x38\x3c\x09\xa7\x35\x17\x2f\x4a\x2d\x8f\x4a\xb4\x28\xa8\xe2\x79\x8b\xbd\x68\x5a\xdb\x72\xd3\x5a\xe3\xa2\xfe\xad\x29\x99\x5b\xde\xb3\x40\x6d\x85\xd1\xaa\x70\x0a\x18\x99\x4e\x27\xb7\x0b\x57\xca\x83\x37\xff\xb7\x20\x57\x99\x8b\xe2\xed\x11\xdc\x97\x7a\x4c\xf2\xa1\x76\x98\x77\xf7\x93\xf9\x62\xfe\xf9\x71\x32\x9f\xdf\x8f\x07\x37\x51\xc3\x35\xe0\x68\x38\xfa\x3c\x5e\xcc\x7e\xfe\x3a\x9c\x7d\x1e\xdc\xb4\x0d\x5d\xd0\x35\x84\xfe\xca\xea\x9e\xb9\xee\xf5\x7b\xfd\x48\x55\xfc\xed\xe5\x44\x70\x57\xcb\xb8\xab\x83\x65\x60\xd0\xc6\x1d\x55\x0b\x4d\x1b\x1e\x7c\x2b\xb5\x85\x38\x5c\xdf\xaa\xd9\x06\xb1\xec\x2e\x5e\xf7\xb3\xb5\x29\xd9\x89\x23\x39\xaf\xdb\xf7\x79\xbf\xf7\xb1\xd7\x3f\x48\x51\xe4\xa8\xab\x73\x29\x49\xd3\xae\x1e\x46\x50\x24\x10\x1d\x03\x84\xa2\x94\x14\xe1\x93\x90\x10\x01\x2f\xc5\xb9\xd6\xdd\x45\x2d\x46\x3b\x5a\xc8\x1e\x16\xa5\xec\x78\x3a\xae\x72\x11\xa5\x23\x77\xff\x7a\x79\xdc\x3d\xcc\xe6\xc3\x87\xd1\x78\x71\x37\x6d\x78\xa2\x7c\xfb\xba\x14\xef\x05\x95\x09\xa4\x1c\x64\x7d\xc2\x90\xa3\x24\xd4\x7c\x80\x7c\xe5\x24\x17\x07\x19\x72\x57\x42\xcb\x12\x14\x4f\xb9\xb2\xa9\x3f\xe3\x60\xff\xd6\x3b\xd4\x15\x40\x5a\x6a\x83\x83\x8f\xfd\x1f\xfb\xdd\xe5\x8d\xb6\xe8\x4c\x06\x61\x9b\x8b\x36\xc1\x72\x95\x5a\xb1\x56\xc0\x53\x46\xbb\x0e\x03\x37\xb5\xa8\x0d\x5d\x43\xba\xbf\x97\x81\x11\x3a\xb5\x3b\x8b\x50\x9c\x51\xff\x67\x23\x10\x3a\xea\xb1\xd7\x1d\xca\x98\xae\xd4\xcb\xd5\xfa\xf3\x88\x27\xa7\x77\x1c\x24\x20\x10\x0e\xa5\xd4\x3b\x97\x6a\x7b\x08\x1e\xf7\x7e\x48\x38\x82\x1c\xf7\xeb\x45\xb6\x96\xd7\x86\x18\x69\xf7\xdf\xb1\x31\x50\x4a\xc1\xa8\xdd\x0b\xea\xab\x6a\x67\x4d\x11\x9e\xe9\xee\xd8\x73\x9c\x04\x2c\xc9\x49\xe2\xf6\x31\x8a\xca\xba\x84\x14\x60\x4e\x5c\xf2\xfd\x17\x57\x36\x27\x2c\xea\xe5\xd3\x89\x4b\x5c\x18\xf5\xd3\x12\x05\x73\xe6\x21\x4c\xbe\x6f\xfc\x2e\xdb\x0a\x83\x15\x95\x4d\x0a\xce\xf2\x39\x58\x14\xca\x3f\xfd\xa6\x92\xaf\x30\x08\x17\x11\x88\x07\x2f\xd5\x51\x95\xed\xf6\x61\x23\x96\x51\x1f\xbe\x52\x2d\x8d\xae\xba\x1a\x99\x6e\xa3\x8f\xe4\x7d\xd2\x91\xb7\xa3\xa3\x6f\xc4\xb8\xbc\xb6\x97\xe4\x7f\xe7\x58\x69\xda\x99\x46\x63\xfb\x0f\x37\xde\xc1\x09\x38\x4d\x8f\xcf\xaa\x9d\x13\x14\x7d\xe7\xe2\x2c\xd1\x6b\x75\x34\xa4\x77\x7c\x78\x17\x27\xf1\xf3\x2f\xcc\xc1\x93\xf4\x9b\x28\x9f\x84\x0a\x53\x6d\x7c\xc1\xdd\xfb\x75\xa3\x94\xe5\x5f\x79\x79\x96\xd9\x1d\xb6\x63\x9e\x1f\xbb\x93\x7f\xf0\x2a\x75\x12\x7d\x78\x90\x78\xca\xae\x87\xf0\x06\x03\xb5\xfd\x4f\x9e\xb1\x94\xdc\xcd\xe6\x77\x93\xc5\x97\xf1\x7c\xb8\xf8\xfe\xae\xdf\x55\xad\xbf\x02\x00\x00\xff\xff\x7c\xe1\xb9\x4d\xc1\x0e\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 3777, mode: os.FileMode(436), modTime: time.Unix(1533686303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
