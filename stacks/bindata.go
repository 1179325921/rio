// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x41\x68\x05\xba\x16\x91\xe5\x74\xcd\x5a\x08\xf0\x83\xe1\xb8\x68\x80\xd4\xf6\x62\x17\xc3\x9e\x0c\x9a\x3c\xdb\x44\x28\x52\x20\x4f\x4e\xbd\x1f\xff\xfb\x40\x89\x92\xa8\x44\x4e\x82\x61\x4f\x36\xf9\x7d\x77\xe4\xf1\xee\x3e\x1d\xd3\x6a\x27\xf6\x36\x1d\x10\x92\x81\x3d\xb8\x5f\x42\x98\x56\x08\x0a\x53\xf2\x77\x5c\xae\x09\xe1\xc2\xd2\xad\x84\xa5\x96\x82\x9d\xa6\x07\x60\xf7\x36\x25\x68\x0a\xf0\xb8\x50\x7b\x03\xd6\x4e\xb5\x42\xa3\xa5\x04\xf3\x4d\x73\x48\x49\xb4\xf8\xf2\x25\xf2\x14\x5a\xe0\xa1\xb2\x4f\xc9\x7c\x31\x9f\xf9\x6d\xc3\xed\x1d\xec\x0c\xd8\xc3\x35\x48\x7a\x4a\xc9\xe5\xc8\x7a\x48\x17\xb8\xd5\x85\xe2\x6b\x43\x77\x3b\xc1\xbc\xb1\x07\x09\xc9\xca\x23\x26\xb7\xb7\x8b\xdf\x37\x93\xf9\x1f\xf5\x4d\x61\x47\x0b\x89\xd3\x32\xae\x96\xcc\x85\x65\xfa\x08\xe6\x74\xee\xb0\x32\x6a\x05\x0c\xd7\x22\x03\x5d\x60\x4a\x7e\xe9\x62\x3b\xb1\x5f\x52\x3c\xa4\x24\x4a\x00\x59\x22\x2c\x0a\x9d\xe4\x46\xff\x38\x45\x0d\x6d\x2b\x14\x35\xa7\x9a\x56\x58\x93\x48\xcd\xa8\x4c\xb6\x42\x25\xa0\x8e\x3a\xa0\x5a\x30\x47\xc1\x60\x2a\x0b\x8b\x60\x52\x52\xfa\x8b\x4b\x7f\xed\xa5\x0d\x15\xea\xba\x30\x14\x85\x56\x29\xf9\x78\xd5\x5e\x28\xa7\x06\x14\xae\x0e\x05\x72\xfd\x10\x70\x2e\xb3\xe0\xd6\x42\x21\x18\x06\xb9\x83\xaa\x84\xdc\xcd\xae\x6f\xee\x66\xd3\x75\xeb\xc7\x1d\x38\xe1\x99\x50\x4b\x6d\x30\x25\x97\x57\xa3\xd1\x28\x0c\xdb\xe5\x73\x29\xa9\x82\x49\x7f\xfe\x82\xa7\x9d\x70\xee\x8a\xa0\x89\x45\x48\x8d\xc3\x37\x7f\xcd\x27\xdf\x66\xab\xe5\x64\x3a\xfb\x27\x75\xde\x3f\x0d\x06\x3e\xf6\xb2\xea\x02\x6e\x95\x2d\x49\xb7\x20\x6d\x9d\xb9\x12\x4e\x49\x89\xfb\xda\xcc\x32\xaa\x78\xda\x1e\x3b\x68\x13\xe4\xcd\xe2\xaa\x96\x83\x3c\x55\x70\xe2\xb6\x4b\x06\xa8\xa3\x30\x5a\x65\xae\xca\xbd\xc9\x72\x71\xbd\x71\x57\x1d\xbf\xf9\xd9\x82\xdc\x25\x8a\x66\xf0\xee\x11\x56\x86\x11\x12\x6c\x4e\x59\xcb\xba\xb9\x5d\xac\x37\xeb\xaf\x77\x8b\xf5\xfa\x76\x36\xbe\xf2\x0f\x59\x03\xd3\xc9\xf4\xeb\x6c\xb3\xfa\xed\xfb\x64\xf5\x75\x7c\x55\x42\x7b\xa9\xb7\x54\x6e\x72\x30\x99\xb0\x56\x68\xd5\x04\xf0\xf6\xbd\x0f\x69\x58\x06\x30\x14\x3a\x79\xff\xb6\xc5\x14\xe0\x83\x36\xf7\x42\x9d\xc1\x5d\xb3\x81\x42\xc1\xca\xb2\x38\xc3\xc9\x05\xfc\x40\x50\xe5\xb9\xc3\xfb\xcf\xd6\x11\x58\x61\x51\x67\x06\xac\x2e\x0c\x03\x0e\x3b\xa1\x84\x73\x61\x03\xc3\xd6\x2a\xc1\x83\x30\x3c\xa7\x06\x4f\xb5\xc9\xeb\x89\xc3\x16\xee\xb7\xf1\xa2\x72\xce\x65\x03\x27\x16\x29\x16\x0d\xcb\x6c\x29\x0b\x22\xf6\xbb\xcc\x00\x45\xb8\xd8\x03\x5e\x48\x61\xf1\xe2\x81\x22\x3b\x5c\x14\x39\xa7\x08\xfe\xa9\x33\x9a\x5b\xcf\x06\xc5\x73\x2d\x14\xd6\xeb\x5c\xf3\xfa\x6f\x5d\xbc\x7e\xd9\x54\x41\xb3\xa1\x39\xb4\x5c\x66\xc0\x3b\x11\x19\xdd\x83\xef\x8d\xa4\xaa\xf7\xcb\xe1\x68\x58\xd5\x88\x27\xa6\x44\x70\x97\x36\x3c\x55\xc5\xcb\xc0\x78\x6b\x2b\x38\xdc\x0b\x27\xbb\x61\x63\x54\x7a\xd1\xaa\x1c\xfc\xc8\xb5\x85\x76\x1d\x97\xfd\xfc\x29\x39\x20\xe6\xdd\xcd\xcb\x51\xb2\x37\x39\x6b\xa5\xa2\x73\x3b\xe7\xf5\xf8\x21\x1d\x0d\x3f\x0f\x43\x31\xa8\x3a\x2f\x70\xd4\x95\xab\x98\xc4\x71\x57\xd6\x02\x28\xe8\xf3\x8e\x01\x42\x96\x4b\x8a\xf0\x45\x48\x08\x80\xc7\x1a\x5b\xc9\xe7\xa6\xd2\x94\x13\xcd\xe4\x10\xb3\x5c\x76\x3c\xf5\x8b\x55\x40\xe9\xa8\xd6\x13\x05\x78\x49\x05\x5e\xaf\x04\x15\xf3\x66\xbe\x5a\x4f\xe6\xd3\xd9\xe6\x66\x59\xf3\x44\xfe\x2e\xd0\xff\x67\x32\xde\xe8\x22\x13\x48\x39\xc8\x34\xac\xa0\xc8\x4b\x9a\x87\xca\x22\x8a\x06\x4f\x32\xe4\x9e\x84\xe6\x39\x28\x1e\x73\x65\xe3\xf2\x8e\xe3\xe6\x93\xed\x50\x57\x00\x71\xae\x0d\x8e\x3f\x8f\x7e\x1d\x75\xb7\x0f\xda\xa2\x33\x19\xfb\x63\x06\x6d\x82\xe5\x2e\xb6\x62\xaf\x80\xc7\x8c\x76\x1d\x7a\x6e\x6c\x51\x1b\xba\x87\xb8\x79\x97\xb1\x11\x3a\xb6\x27\x8b\x90\xbd\xa0\x7b\x0f\x46\x20\x74\xfa\xa6\xe9\x38\xca\x98\x2e\xd4\xe3\xdd\x6a\xd9\xe3\xc9\x75\x3a\x07\x09\x08\x84\x43\x2e\xf5\xc9\xa5\xda\x3e\x05\xfb\xbd\x3f\x25\xf4\x20\xfd\x7e\x4b\x79\xa9\x84\xa5\x26\x06\xaa\xf5\x5f\x6c\x0c\xe4\x52\x30\x6a\xeb\x27\x79\x5d\xed\xec\x29\xc2\x03\x3d\xf5\x7d\x55\x23\x8f\x45\x29\x89\xdc\x39\x46\x51\x19\xf5\xd4\x58\x2d\x04\x41\x8d\x29\xc0\x94\xb8\xea\x28\x57\x5c\xd9\x94\xb0\xa0\xd9\x1f\x95\x60\x2b\x10\x31\x31\xba\xa8\x59\x31\x89\x8f\xfe\x4f\xf4\x21\x6a\xea\xa7\x77\x48\xab\xb5\xff\xd2\xbe\x25\x3f\x3d\xc7\x88\xe3\xce\xbc\x54\xdb\x7d\xbc\x2a\x0d\x7b\xa0\x38\xee\x9f\xa2\x9a\x13\xb3\x91\x33\x7d\x96\x54\xca\x4e\x30\x36\x36\xb6\xa5\x69\x2f\xd6\x2b\x92\xf1\x93\x01\xd0\x11\xff\x14\xf9\xbd\x50\x7e\xae\xaa\x1f\xac\x7d\x2f\xf7\xdd\xb3\xfc\x3b\xcf\xcf\x32\xba\xe3\x5d\x8d\x97\x43\x5e\x34\x78\x85\x70\x06\xa2\xd9\x49\x50\xf7\xc0\x70\x86\xab\x46\x3c\xaf\xb0\xff\xdf\x6c\xf5\x8c\x9a\xc6\xe4\x66\xb5\xbe\x59\x6c\xbe\xcd\xd6\x93\xcd\xf9\x93\x5e\xfc\xc4\x9e\x17\xa5\xc8\xb5\x68\x35\x30\x04\x8d\xfa\xc2\x78\x13\x3d\x6f\xfc\x3e\x39\x0a\x83\x05\x95\xb5\xbc\xbc\xc8\xe7\x60\x51\xa8\xb2\xf8\x4c\x21\x5f\x61\xe0\x9b\xdc\x46\x83\x7f\x03\x00\x00\xff\xff\x05\x8d\x16\x05\xe6\x0d\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 3558, mode: os.FileMode(436), modTime: time.Unix(1533600487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
